//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the EntrEntityId source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

using System;
using System.Collections.Immutable;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Entr.Data;
using Entr.Domain;

namespace Entr.Data.EntityFramework.Generated.SampleApi.Products
{
    using global::SampleApi.Products;

    public sealed class ProductIdValueConverter : ValueConverter<ProductId, System.Guid>
    {
        private static readonly Func<ValueConverterInfo, ValueConverter> Factory = vci => new ProductIdValueConverter(vci.MappingHints);

        public static readonly ValueConverterInfo DefaultInfo = new(
            modelClrType: typeof(ProductId),
            providerClrType: typeof(System.Guid),
            factory: Factory,
            null);

        public ProductIdValueConverter() : this(null) { }
        public ProductIdValueConverter(ConverterMappingHints mappingHints = null)
            : base(
                id => id.Value,
                value => new ProductId(value),
                mappingHints
            )
        { }
    }
}
namespace Entr.Data.EntityFramework.Generated.SampleApi.Security
{
    using global::SampleApi.Security;

    public sealed class RoleIdValueConverter : ValueConverter<RoleId, System.Guid>
    {
        private static readonly Func<ValueConverterInfo, ValueConverter> Factory = vci => new RoleIdValueConverter(vci.MappingHints);

        public static readonly ValueConverterInfo DefaultInfo = new(
            modelClrType: typeof(RoleId),
            providerClrType: typeof(System.Guid),
            factory: Factory,
            null);

        public RoleIdValueConverter() : this(null) { }
        public RoleIdValueConverter(ConverterMappingHints mappingHints = null)
            : base(
                id => id.Value,
                value => new RoleId(value),
                mappingHints
            )
        { }
    }
}
namespace Entr.Data.EntityFramework.Generated.SampleApi.Security
{
    using global::SampleApi.Security;

    public sealed class UserIdValueConverter : ValueConverter<UserId, System.Guid>
    {
        private static readonly Func<ValueConverterInfo, ValueConverter> Factory = vci => new UserIdValueConverter(vci.MappingHints);

        public static readonly ValueConverterInfo DefaultInfo = new(
            modelClrType: typeof(UserId),
            providerClrType: typeof(System.Guid),
            factory: Factory,
            null);

        public UserIdValueConverter() : this(null) { }
        public UserIdValueConverter(ConverterMappingHints mappingHints = null)
            : base(
                id => id.Value,
                value => new UserId(value),
                mappingHints
            )
        { }
    }
}

namespace Entr.Data.EntityFramework
{
    public class EntrEntityIdValueConverterSelector : ValueConverterSelector
    {
        private static readonly ImmutableArray<ValueConverterInfo> _converters;

        static EntrEntityIdValueConverterSelector()
        {
            var converters = ImmutableArray.CreateBuilder<ValueConverterInfo>();
            converters.Add(Entr.Data.EntityFramework.Generated.SampleApi.Products.ProductIdValueConverter.DefaultInfo);
            converters.Add(Entr.Data.EntityFramework.Generated.SampleApi.Security.RoleIdValueConverter.DefaultInfo);
            converters.Add(Entr.Data.EntityFramework.Generated.SampleApi.Security.UserIdValueConverter.DefaultInfo);

            _converters = converters.ToImmutable();
        }

        public EntrEntityIdValueConverterSelector(ValueConverterSelectorDependencies dependencies)
            : base(dependencies)
        {
        }

        public override IEnumerable<ValueConverterInfo> Select(Type modelClrType, Type providerClrType = null)
        {
            foreach (var info in base.Select(modelClrType, providerClrType))
            {
                yield return info;
            }

            foreach (var info in _converters)
            {
                if (info.ModelClrType == modelClrType)
                {
                    if (providerClrType is not null && providerClrType == info.ProviderClrType)
                    {
                        yield return info;
                    }
                    else
                    {
                        yield return info;
                    }
                }
            }
        }
    }
}
