using System.Text;

namespace Entr.Data.EntityFramework.Generators;

internal class SourceCodeGenerator
{
    internal const string Attribute = @"namespace Entr.Data.EntityFramework
{
    [System.AttributeUsage(System.AttributeTargets.Class)]
    public class EntrEntityIdValueConverterSelectorAttribute<TValue> : System.Attribute
    {
    }
}
";

    private const string Header = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the EntrEntityId source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

using System;
using System.Collections.Immutable;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Entr.Data;
using Entr.Domain;

";

    public static string GenerateSource(List<EntityIdTypeMetadata> entityIdClasses)
    {
        var builder = new StringBuilder();
        
        builder.Append(Header);

        GenerateUsingStatements(entityIdClasses, builder);

        foreach (var entityIdClass in entityIdClasses)
        {
            GenerateEntityIdClass(entityIdClass, builder);
        }
        
        GenerateValueProviderSelector(entityIdClasses, builder);
        
        return builder.ToString();
    }

    private static void GenerateUsingStatements(List<EntityIdTypeMetadata> entityIdClasses, StringBuilder builder)
    {
        var entityIdNamespaces = entityIdClasses
            .Select(c => c.ContainingNamespace)
            .Distinct();

        foreach (var entityIdNamespace in entityIdNamespaces)
        {
            builder.AppendLine($"using {entityIdNamespace};");
        }
    }

    private static void GenerateEntityIdClass(EntityIdTypeMetadata c, StringBuilder builder)
    {
        builder.Append(@$"namespace Entr.Data.EntityFramework
{{
    public sealed class {c.Name}ValueConverter : ValueConverter<{c.Name}, {c.WrappedType}>
    {{
        private static readonly Func<ValueConverterInfo, ValueConverter> Factory = vci => new {c.Name}ValueConverter(vci.MappingHints);
        
        public static readonly ValueConverterInfo DefaultInfo = new(
            modelClrType: typeof({c.Name}), 
            providerClrType: typeof({c.WrappedType}), 
            factory: Factory, 
            null);

        public {c.Name}ValueConverter() : this(null) {{}}
        public {c.Name}ValueConverter(ConverterMappingHints mappingHints = null)
            : base(
                id => id.Value,
                value => new ProductId(value),
                mappingHints
            ) 
        {{ }}
    }}
}}
");
    }

    public static void GenerateValueProviderSelector(List<EntityIdTypeMetadata> classesToGenerate, StringBuilder builder)
    {
        builder.Append(@"
namespace Entr.Data.EntityFramework
{
    public class EntrEntityIdValueConverterSelector : ValueConverterSelector
    {
        private static readonly ImmutableArray<ValueConverterInfo> _valueConverters;

        static EntrEntityIdValueConverterSelector()
        {
            var dict = new List<ValueConverterInfo>
            {
");

        foreach (var classToGenerate in classesToGenerate)
        {
            builder.Append($"                {classToGenerate.Name}ValueConverter.DefaultInfo,");
        }

        builder.Append(@"
            };

            _valueConverters = dict.ToImmutableArray();
        }
    
        public EntrEntityIdValueConverterSelector(ValueConverterSelectorDependencies dependencies) 
            : base(dependencies)
        {
        }

        public override IEnumerable<ValueConverterInfo> Select(Type modelClrType, Type providerClrType = null)
        {
            foreach (var info in base.Select(modelClrType, providerClrType))
            {
                yield return info;
            }

            foreach (var info in _valueConverters)
            {
                if (info.ModelClrType == modelClrType)
                {
                    if (providerClrType is not null && providerClrType == info.ProviderClrType)
                    {
                        yield return info;
                    }
                    else
                    {
                        yield return info;
                    }
                }
            }
        }
    }
}
");
    }
}
