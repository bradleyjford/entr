using System.Collections.Immutable;
using System.Globalization;
using System.Text;

namespace Entr.Data.EntityFramework.Generators;

internal static class SourceCodeGenerator
{
    private const string Header = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the EntrEntityId source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

using System;
using System.Collections.Immutable;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Entr.Data;
using Entr.Domain;

";

    public static string GenerateSource(ImmutableArray<EntityIdInfo> entityIdClasses)
    {
        var builder = new StringBuilder();

        builder.Append(Header);

        foreach (var entityIdClass in entityIdClasses)
        {
            GenerateEntityIdClass(entityIdClass, builder);
        }

        GenerateValueProviderSelector(entityIdClasses, builder);

        return builder.ToString();
    }

    // private static void GenerateUsingStatements(List<EntityIdTypeMetadata> entityIdClasses, StringBuilder builder)
    // {
    //     var entityIdNamespaces = entityIdClasses
    //         .Select(c => c.ContainingNamespace)
    //         .Distinct();
    //
    //     foreach (var entityIdNamespace in entityIdNamespaces)
    //     {
    //         builder.AppendLine($"using {entityIdNamespace};");
    //     }
    // }

    internal static void GenerateEntityIdClass(EntityIdInfo idInfo, StringBuilder builder)
    {
        builder.Append(@$"namespace Entr.Data.EntityFramework.Generated.{idInfo.Namespace}
{{
    using global::{idInfo.Namespace};

    public sealed class {idInfo.Name}ValueConverter : ValueConverter<{idInfo.Name}, {idInfo.WrappedType}>
    {{
        private static readonly Func<ValueConverterInfo, ValueConverter> Factory = vci => new {idInfo.Name}ValueConverter(vci.MappingHints);

        public static readonly ValueConverterInfo DefaultInfo = new(
            modelClrType: typeof({idInfo.Name}),
            providerClrType: typeof({idInfo.WrappedType}),
            factory: Factory,
            null);

        public {idInfo.Name}ValueConverter() : this(null) {{ }}
        public {idInfo.Name}ValueConverter(ConverterMappingHints mappingHints = null)
            : base(
                id => id.Value,
                value => new {idInfo.Name}(value),
                mappingHints
            )
        {{ }}
    }}
}}
");
    }

    private static void GenerateValueProviderSelector(ImmutableArray<EntityIdInfo> classesToGenerate, StringBuilder builder)
    {
        builder.Append(@"
namespace Entr.Data.EntityFramework
{
    public class EntrEntityIdValueConverterSelector : ValueConverterSelector
    {
        private static readonly ImmutableArray<ValueConverterInfo> _converters;

        static EntrEntityIdValueConverterSelector()
        {
            var converters = ImmutableArray.CreateBuilder<ValueConverterInfo>();
");

        foreach (var classToGenerate in classesToGenerate)
        {
            builder.AppendLine(
                $"            converters.Add(Entr.Data.EntityFramework.Generated.{classToGenerate.Namespace}.{classToGenerate.Name}ValueConverter.DefaultInfo);");
        }

        builder.Append(@"
            _converters = converters.ToImmutable();
        }

        public EntrEntityIdValueConverterSelector(ValueConverterSelectorDependencies dependencies)
            : base(dependencies)
        {
        }

        public override IEnumerable<ValueConverterInfo> Select(Type modelClrType, Type providerClrType = null)
        {
            foreach (var info in base.Select(modelClrType, providerClrType))
            {
                yield return info;
            }

            foreach (var info in _converters)
            {
                if (info.ModelClrType == modelClrType)
                {
                    if (providerClrType is not null && providerClrType == info.ProviderClrType)
                    {
                        yield return info;
                    }
                    else
                    {
                        yield return info;
                    }
                }
            }
        }
    }
}
");
    }
}
