using System.Text;

namespace Entr.Domain.Generators;

internal static class SourceCodeGenerator
{
    internal const string Attribute = @"namespace Entr.Domain
{
    [System.AttributeUsage(System.AttributeTargets.Class)]
    public class EntrEntityIdAttribute<TValue> : System.Attribute
    {
    }
}
";

    private const string Header = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the EntrEntityId source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

using System;
using Entr.Domain;

";

    public static string GenerateSource(List<EntityIdTypeMetadata> entityIdClasses)
    {
        var builder = new StringBuilder();

        builder.Append(Header);

        foreach (var entityIdClass in entityIdClasses)
        {
            GenerateEntityIdClass(entityIdClass, builder);
        }
        
        return builder.ToString();
    }

    private static void GenerateEntityIdClass(EntityIdTypeMetadata c, StringBuilder builder)
    {
        builder.Append(@$"
namespace {c.ContainingNamespace}
{{
    public partial class {c.Name}
    {{
        private readonly {c.WrappedType} _value;
        private int _hashCode = 0;

");

        if (c.WrappedType == "Guid" || c.WrappedType == "System.Guid")
        {
            builder.Append(@$"
        public static {c.Name} New()
        {{
            return new {c.Name}(SequentialGuidGenerator.GenerateId());
        }}
");
        }

        builder.Append(@$"
        public {c.Name}({c.WrappedType} value)
        {{
            if (value == default)
            {{
                throw new ArgumentException(""Specified value cannot be default({c.WrappedType})"", nameof(value));
            }}

            _value = value;
        }}

        protected {c.Name}()
        {{
        }}

        public {c.WrappedType} Value => _value;

        public override bool Equals(object obj)
        {{
            var other = obj as {c.Name};

            if (other is null)
            {{
                return false;
            }}

            return _value.Equals(other._value);
        }}

        public override int GetHashCode()
        {{
            if (_hashCode == 0)
            {{
                _hashCode = CalculateHashCode();
            }}

            return _hashCode;
        }}

        private int CalculateHashCode()
        {{
            var hashCode = HashCodeUtility.Seed;
            hashCode = HashCodeUtility.Hash(hashCode, GetType());
            hashCode = HashCodeUtility.Hash(hashCode, _value);
            return hashCode;
        }}

        public override string ToString() => $""<{c.Name}>{{_value}}"";

        public static bool operator ==({c.Name} left, {c.Name} right) => 
            Equals(left, right);

        public static bool operator !=({c.Name} left, {c.Name} right) => 
            !Equals(left, right);
    }}
}}
");
    }
}
