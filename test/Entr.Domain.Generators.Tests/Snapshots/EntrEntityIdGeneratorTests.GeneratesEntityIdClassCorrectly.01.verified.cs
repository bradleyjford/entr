//HintName: EntrEntityIds.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the EntrEntityId source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

using System;
using Entr.Domain;


namespace Entr.Domain.Tests
{
    public partial class UserId
    {
        private readonly int _value;
        private int _hashCode = 0;


        public UserId(int value)
        {
            if (value == default)
            {
                throw new ArgumentException("Specified value cannot be default(int)", nameof(value));
            }

            _value = value;
        }

        protected UserId()
        {
        }

        public int Value => _value;

        public override bool Equals(object obj)
        {
            var other = obj as UserId;

            if (other is null)
            {
                return false;
            }

            return _value.Equals(other._value);
        }

        public override int GetHashCode()
        {
            if (_hashCode == 0)
            {
                _hashCode = CalculateHashCode();
            }

            return _hashCode;
        }

        private int CalculateHashCode()
        {
            var hashCode = HashCodeUtility.Seed;
            hashCode = HashCodeUtility.Hash(hashCode, GetType());
            hashCode = HashCodeUtility.Hash(hashCode, _value);
            return hashCode;
        }

        public override string ToString() => $"<UserId>{_value}";

        public static bool operator ==(UserId left, UserId right) => 
            Equals(left, right);

        public static bool operator !=(UserId left, UserId right) => 
            !Equals(left, right);
    }
}

namespace Entr.Domain.Tests
{
    public partial class RoleId
    {
        private readonly System.Guid _value;
        private int _hashCode = 0;


        public static RoleId New()
        {
            return new RoleId(SequentialGuidGenerator.GenerateId());
        }

        public RoleId(System.Guid value)
        {
            if (value == default)
            {
                throw new ArgumentException("Specified value cannot be default(System.Guid)", nameof(value));
            }

            _value = value;
        }

        protected RoleId()
        {
        }

        public System.Guid Value => _value;

        public override bool Equals(object obj)
        {
            var other = obj as RoleId;

            if (other is null)
            {
                return false;
            }

            return _value.Equals(other._value);
        }

        public override int GetHashCode()
        {
            if (_hashCode == 0)
            {
                _hashCode = CalculateHashCode();
            }

            return _hashCode;
        }

        private int CalculateHashCode()
        {
            var hashCode = HashCodeUtility.Seed;
            hashCode = HashCodeUtility.Hash(hashCode, GetType());
            hashCode = HashCodeUtility.Hash(hashCode, _value);
            return hashCode;
        }

        public override string ToString() => $"<RoleId>{_value}";

        public static bool operator ==(RoleId left, RoleId right) => 
            Equals(left, right);

        public static bool operator !=(RoleId left, RoleId right) => 
            !Equals(left, right);
    }
}
